<?php

namespace App\Controller\Admin;

use App\Entity\Car;
use App\Entity\ContactMessage;
use App\Entity\ContactMessageCar;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\EmailField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TelephoneField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class ContactMessagesCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return ContactMessage::class;
    }


    public function configureFields(string $pageName): iterable
    {
        yield TextField::new('fullname')->setLabel('Nom complet');
        yield EmailField::new('email')->setLabel('Email');
        yield TelephoneField::new('phoneNumber')->setLabel('Téléphone');
        yield TextField::new('subject')->setLabel('Objet du message');
        yield AssociationField::new('concernedCar', 'Véhicule concerné')
            ->setTemplatePath('admin/field/car/detail/car.html.twig')
            ->setSortable(false)
//            ->setSortable(false)
//            ->setTemplatePath('@EasyAdmin/crud/detail.html.twig')
        ;
        yield TextField::new('message')->setLabel('Message');
        yield TextField::new('createdBy')->setLabel('Crée par');
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityLabelInSingular('Message')
            ->setEntityLabelInPlural('Messages')
            ->setPageTitle('index', 'Liste des messages')
            ->setPaginatorPageSize(10)
            ->showEntityActionsInlined()
            ->setPageTitle(Crud::PAGE_DETAIL, function($message){ return 'Demande de ' . $message->getFullname();})
        ;
    }

    public function configureActions(Actions $actions): Actions
    {
        return $actions
            ->disable(Action::NEW, Action::EDIT)
            ->set(Crud::PAGE_INDEX, Action::DETAIL)
        ;
    }

    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        $currentUser = $this->getUser();
        $entityInstance->setCreatedBy($currentUser->getFullname());
        parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }
}
